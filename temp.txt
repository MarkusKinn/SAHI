int run() {
    cv::Mat image = cv::imread("img.png");  // Replace with your image path
    if (image.empty()) {
        std::cerr << "Error: Image not found." << std::endl;
        return -1;
    }

    // Slicer parameters
    int slice_height = 256; // Adjust these values as needed
    int slice_width = 256;
    float overlap_height_ratio = 0.0f;
    float overlap_width_ratio = 0.0f;

    // Directory for slices
    std::string slice_directory = "slices";
    if (!std::filesystem::exists(slice_directory)) {
        std::filesystem::create_directory(slice_directory);
    }

    ImageSlicer slicer(slice_height, slice_width, overlap_height_ratio, overlap_width_ratio);

    const int num_iterations = 1; // Number of times to repeat the slicing for averaging
    std::vector<double> times;
    times.reserve(num_iterations);

    for (int i = 0; i < num_iterations; ++i) {
        cv::Mat image = cv::imread("img.png");  // Replace with your image path
        if (image.empty()) {
            std::cerr << "Error: Image not found." << std::endl;
            return -1;
        }

        auto start = std::chrono::high_resolution_clock::now();

        int slice_index = 0;
        slicer.slice(image, [&](const cv::Mat& slice) {
            std::stringstream ss;
            ss << slice_directory << "/slice_" << i << "_" << slice_index++ << ".jpg";  // Naming each slice
            cv::imwrite(ss.str(), slice);
        });

        auto end = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double, std::milli> elapsed = end - start;
        times.push_back(elapsed.count());
    }

    // Calculate the average time
    double total_time = std::accumulate(times.begin(), times.end(), 0.0);
    double average_time = total_time / times.size();

    // Display the average elapsed time
    std::cout << "Average slicing time over " << num_iterations << " iterations: "
              << average_time << "s." << std::endl;

    std::cout << "Total slicing time over " << num_iterations << " images: "
              << total_time << "s." << std::endl;
}